[
  {
    "command": "array_map()",
    "description": "配列の各要素にコールバック関数を適用して、新しい配列を作成します。複数の配列を同時に処理することも可能です。"
  },
  {
    "command": "array_filter()",
    "description": "配列の要素をコールバック関数でフィルタリングし、条件を満たす要素のみを含む新しい配列を返します。"
  },
  {
    "command": "array_reduce()",
    "description": "配列の要素を反復的に関数に渡して単一の値に集約します。配列の合計や文字列連結などに使用します。"
  },
  {
    "command": "array_merge()",
    "description": "複数の配列を結合して新しい配列を作成します。重複するキーは後の配列の値で上書きされます。"
  },
  {
    "command": "array_push()",
    "description": "配列の末尾に1つ以上の要素を追加します。変更後の配列の要素数を返します。"
  },
  {
    "command": "array_pop()",
    "description": "配列の最後の要素を削除して返します。配列が空またはnullの場合はnullを返します。"
  },
  {
    "command": "array_shift()",
    "description": "配列の先頭要素を削除して返します。残りの要素のキーが再インデックスされます。"
  },
  {
    "command": "array_unshift()",
    "description": "配列の先頭に1つ以上の要素を追加します。既存の数値キーは再インデックスされます。"
  },
  {
    "command": "in_array()",
    "description": "配列内に特定の値が存在するかを検索します。第3引数でstrict比較（型も含む）を指定できます。"
  },
  {
    "command": "array_key_exists()",
    "description": "配列に指定したキーが存在するかを確認します。値がnullでもキーが存在すればtrueを返します。"
  },
  {
    "command": "count()",
    "description": "配列の要素数または可算オブジェクトの要素数を返します。多次元配列では第2引数でrecursiveカウントが可能です。"
  },
  {
    "command": "strlen()",
    "description": "文字列の長さ（バイト数）を返します。マルチバイト文字列の場合はmb_strlen()の使用を推奨します。"
  },
  {
    "command": "substr()",
    "description": "文字列の一部を抽出します。開始位置と長さを指定して部分文字列を取得できます。"
  },
  {
    "command": "str_replace()",
    "description": "文字列内の指定した文字列を別の文字列で置換します。配列を使用して複数の置換パターンを指定できます。"
  },
  {
    "command": "explode()",
    "description": "文字列を指定した区切り文字で分割して配列にします。第3引数で分割数の上限を指定できます。"
  },
  {
    "command": "implode()",
    "description": "配列の要素を指定した区切り文字で連結して文字列にします。join()のエイリアスでもあります。"
  },
  {
    "command": "trim()",
    "description": "文字列の先頭と末尾から空白文字を削除します。第2引数で削除する文字を指定できます。"
  },
  {
    "command": "strtolower()",
    "description": "文字列をすべて小文字に変換します。マルチバイト文字列の場合はmb_strtolower()を使用します。"
  },
  {
    "command": "strtoupper()",
    "description": "文字列をすべて大文字に変換します。マルチバイト文字列の場合はmb_strtoupper()を使用します。"
  },
  {
    "command": "json_encode()",
    "description": "PHP変数をJSON文字列に変換します。第2引数でJSONオプション（整形、エスケープなど）を指定できます。"
  },
  {
    "command": "json_decode()",
    "description": "JSON文字列をPHP変数に変換します。第2引数でtrueを指定すると連想配列として返します。"
  },
  {
    "command": "var_dump()",
    "description": "変数の型と値の詳細情報を表示します。デバッグ時に変数の状態を確認するのに便利です。"
  },
  {
    "command": "print_r()",
    "description": "配列やオブジェクトの内容を人間が読みやすい形式で出力します。第2引数でtrueを指定すると文字列として返します。"
  },
  {
    "command": "isset()",
    "description": "変数が設定されており、nullでないかを確認します。複数の変数を同時にチェックすることも可能です。"
  },
  {
    "command": "empty()",
    "description": "変数が空かどうかを確認します。0、空文字列、null、false、空配列などはtrueを返します。"
  }
]